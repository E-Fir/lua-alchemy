<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="onCreationComplete()">
    <mx:Script>
      <![CDATA[
        private function onCreationComplete():void
        {
          var stylesheet:StyleSheet = new StyleSheet();
          stylesheet.parseCSS(helpStyle);
          helpText.styleSheet = stylesheet;
        }
      ]]>
    </mx:Script>
    <mx:String>
    </mx:String>
   <mx:TextArea id="helpText" editable="false" width="100%" height="100%" condenseWhite="true">
    <mx:htmlText>
<![CDATA[<h1>Lua Alchemy</h1>
<br><p>Project Home: <a target="_blank" href="http://code.google.com/p/lua-alchemy/">http://code.google.com/p/lua-alchemy/</a>
<br>Version: v0.1a</p>

<br><h1>Introduction</h1>
<p><a target="_blank" href="http://code.google.com/p/lua-alchemy/"/>Lua Alchemy</a> is a port of the <a target="_blank" href="http://www.lua.org/">Lua 5.1.4</a>
programming language for ActionScript using
<a target="_blank" href="http://labs.adobe.com/wiki/index.php/Alchemy">Alchemy</a>.</p>

<br><h1>Known Issues</h1>
<ul>
  <li>Code Editor - TextArea makes for a poor code editor.  Behavior of copy/paste is erratic and you may loose line returns.  You can load/save files and use a real code editor if needed.</li>
  <li>No stdio - Lua calls to io.write() and print() don't have anywhere to go.  The print() demo shows how to override print to go to the output canvas.</li>
  <li>Possible Memory Leaks - Event listeners and timers made in Lua aren't cleaned up automatically.
    The "Moving Box" demo has a garbage collection function to stop the timer.  The "Button Click"
    demo uses a weak reference on the listener.</li>
</ul>
<br><h1>Lua AS3 Interface</h1>
<p>The Lua script has a "canvas" variable exported from the Flex application.  This canvas is in the upper right of the demo application. You can manipulate this canvas just like any object using the as3 interface described below.<p>
<br><b>Example</b><br>
<pre>
as3.call(canvas, "setStyle", "backgroundColor", "red")
</pre>

<br><p>There is also an "output" variable exported from the Flex application.  This is the TextArea in the lower right part of the demo and could be used to override the Lua print() funciton like this:<p>
<br><pre>
print = function(...)<br>
 local t = {...}<br>
 for k,v in pairs(t) do<br>
   t[k] = tostring(v)<br>
 end<br>
  as3.set(output, "text", as3.get(output, "text") .. table.concat(t,"\t") .. "\n")<br>
end<br>
</pre>

<br><h2>as3.yield()</h2>
<p>Release control to Flash and return to this point on the next timer tick.  This currently doesn't allow UI updates, but does prevent the script from timing out over long operations.</p>
<br><b>Example</b><br>
<pre>
as3.yield()
</pre><br>

<br><h2>as3.class("[package::]ClassName")</h2>
<p>Return the requested class in package::ClassName form.
The return can be used to call static class functions or get/set static properties</p>
<br><p><b>Note: </b>Only classes that have been included in the demo can be created.  At the very least
all of mx.containers and mx.controls has been included along with all the top level and default classes
all flash objects get.</p>
<br><b>Example</b><br>
<pre>
v = as3.class("flash.utils:ByteArray")
</pre><br>

<br><h2>as3.new("[package::]ClassName[, param1,... paramN]")</h2>
<p>Create a new instance of the given class in package::ClassName form.</p>
<br><p><b>Note: </b>Only classes that have been included in the demo can be created.  At the very least
all of mx.containers and mx.controls has been included along with all the top level and default classes
all flash objects get.</p>
<br><b>Example</b><br>
<pre>
v = as3.new("flash.utils:ByteArray")<br>
s = as3.new("String", "some string")
</pre><br>

<br><h2>as3.release(this)</h2>
<p>Release the given ActionScript object so Flash will do garbage collection.</p>
<br><b>Example</b><br>
v = as3.new("String")<br>
as3.release(v)
<pre>
</pre><br>

<br><h2>as3.tolua(this, ...)</h2>
<p>Convert ActionScript value to a Lua type if possible (see push_as3_to_lua_stack).
Supports multiple arguments.
If conversion is not possible, this will return the original AS object.
If argument is a Lua value, it is returned intact.</p>
<br><b>Example</b><br>
v = as3.new("String", "some string")<br>
s, n = as3.tolua(v, 42) -- s is a Lua string with value "some string", n is a Lua number 42
<pre>
</pre><br>

<br><h2>as3.get(this, "property")</h2>
<p>Return the requested property of a given ActionScript object. The value
is returned as a Lua type if possible (see as3.tolua())</p>
<br><b>Example</b><br>
<pre>
v = as3.new("Array")<br>
return as3.get(v, "length")
</pre><br>

<br><h2>as3.set(this, "property", value)</h2>
<p>Set the requested property of a given ActionScript object.</p>
<br><b>Example</b><br>
<pre>
v = as3.new("mx.components::TextArea")<br>
as3.set(v, "text", "hello")
</pre><br>

<br><h2>as3.call(this, "function"[, param1, ... paramN])</h2>
<p>Call a function on a given ActionScript object</p>
<br><b>Example</b><br>
<pre>
box = as3.new("mx.containers::Canvas")<br>
as3.call(box, "setStyle", "backgroundColor", "blue")
</pre><br>

<br><h2>as3.type(this)</h2>
<p>Returns the ActionScript getQualifiedClassName() for the given value</p>
<br><b>Example</b><br>
<pre>
box = as3.new("mx.containers::Canvas")<br>
type = as3.type(box) -- "mx.containers::Canvas"
</pre><br>

<br><h2>as3.namespacecall("package", "function"[, param1, ... paramN])</h2>
<p>Call a namespace level function</p>
<br><b>Example</b><br>
<pre>
v = as3.new("wrapperSuite.tests::TestWrapperHelper")<br>
return as3.namespacecall("flash.utils", "getQualifiedClassName", v)
</pre><br>

<br><h2>as3.trace(param1, ... paramN)</h2>
<p>Write to Flash trace output (print-like)</p>
<br><b>Example</b><br>
<pre>
as3.trace("Hello from Lua Alchemy!")
</pre><br>
]]>
    </mx:htmlText>
  </mx:TextArea>
  <mx:String id="helpStyle">
<![CDATA[
h1 {
    font-size: 24;
    text-decoration: bold;
}
h2 {
    font-size: 16;
    text-decoration: bold;
}

p {
    font-size: 12;
    text-align: justify;
}

pre {
    font-size: 12;
    font-family: mono;
    text-align: justify;
}

li {
    font-size: 12;
    text-align: justify;
}

a {
    text-decoration: underline;
    color: #0000FF;
}

a:hover {
    color: #FF0000;
}
]]>
  </mx:String>
</mx:VBox>
